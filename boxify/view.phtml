<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Boxify</title>
		<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.7.0/build/reset/reset-min.css"> 
		<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.7.0/build/base/base-min.css"> 
		<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.7.0/build/fonts/fonts-min.css"> 
		<link rel="stylesheet" type="text/css" href="http://projectbaird.com/screen.css" media="screen"> 
		<link rel="stylesheet" type="text/css" href="http://projectbaird.com/print.css" media="print"> 
		<link rel="stylesheet" type="text/css" href="boxify.css" media="screen">
	</head>
	<body class="toys boxify">
		<div id="surround">
			<h1><a href="/boxify/">Boxify</a></h1>		
<?php if($kind) { ?>
			<div class="section">
			<p>Selected network:
			<strong><?php
			if($kind == 'dvb' || $kind == 'atsc')
			{
				echo _e($platform[$kind]['name']) . ' → ' . _e($platform[$kind]['onid'][$onid]['name']) . ' → ' . _e($platform[$kind]['onid'][$onid]['nid'][$nid]['name']);
			}
			else
			{
				echo _e($platform[$kind]['name']);
			}
			?></strong>
			</p>
			<?php
			if(count($alerts))
			{
				echo '<ul>';
				foreach($alerts as $msg)
				{
					echo '<li>' . $msg . '</li>';					
				}
				echo '</ul>';
			}
			
			if(empty($_REQUEST['xrd']) && count($xrd))
			{
				echo '<p><strong>One or more XRD sources were discovered.</strong> <a href="' . _e($query_string . '&xrd=1') . '">Retry request with XRD processing enabled</a>. This will update/augment the channel line-up.</p>';
			}
			?>
			<h2>What is it?</h2>
			<p>
				This prototype uses static channel data intended to match that which would be
				obtained by a receiver. It arranges a channel listing in the same way a
				device would, and then performs service discovery on each of the available
				broadcast services.
			</p>
			<h2>Why?</h2>
			<p>
				The idea is to demonstrate two things: first, how a hybrid receiver can provide
				additional services through lightweight protocols for service discovery; second,
				to show information capable of being utilised by a "second screen" device which
				doesn't itself contain a receiver.
			</p>
			<h2>How does it work?</h2>
			<p>
				We start with a static list of services - this is a dump from a MythTV channel
				database, and is the same information that any DVB-T receiver has access to. The
				tool immediately performs DNS lookups (using <a href="http://projectbaird.com/discovery/tvdns/">TVDNS</a>)
				to find advertised IP-delivered services relating to the channels in the line-up.
			</p>
			<p>
				If one of the services advertised in DNS is <code>_xrd._tcp</code>, this tool will
				optionally retrieve it and process it. XRD documents allow both existing
				channel data to be updated with extra information (such as channel logos
				and more descriptive names, and links to simulcast streams), as well
				as additional channels, be they linear or or-demand.
			</p>
			<p>
				Each channel name is a link to the <a href="/lookup/">lookup tool</a> page for that
				specific channel.
			</p>
			<p>
				Channels which are solely IP-delivered (i.e., described by the XRD, have some kind
				of available stream, and aren't already in the line-up) are given channel numbers
				in the range 900-999.
			</p>
			<p>
				The <em>only</em> pieces of static data here is the MythTV dump (which should match
				what a real live DTT tuner sees in any case) and the <code>tvdns.net</code> root
				domain for TVDNS lookups. Everything else is service discovery-driven.
			</p>
			<h2>What's the deal with the website column?</h2>
			<p>
				There are three different websites advertised, depending on the service. A couple of
				services are advertising based upon location, and so link straight to the "BBC Bristol"
				page — these ones are shown as "news.bbc.co.uk". Others are known to be BBC services
				(based on the multiplex ID) and so fall back to the default of "www.bbc.co.uk". Finally,
				there's a default advertisement in DNS for "www.freeview.co.uk" for anything else.
			</p>
			<h2>Why is there only rich data for a handful of services?</h2>
			<p>
				At the moment, only a sample XRD for some BBC services is being advertised. You can
				view the file itself <a href="http://github.com/nexgenta/Baird/blob/gh-pages/applications/manifests/sample-bbc.xml">here</a>.
				In a production scenario, each broadcaster and network would advertise their
				own XRDs.
			</p>
			<h2>It seems slow</h2>
			<p>
				Few of the protocols in use here are designed to be modal - the intention is that
				a receiver will slowly load the extra data in the background while the user gets
				on with receiving the services, and then caches it for a very long time (updating
				in the background periodically).
			</p>
			</div>
			<?php
			if(empty($_REQUEST['grid']))
			{
				require_once(dirname(__FILE__) . '/list.phtml');
			}
			else
			{
				require_once(dirname(__FILE__) . '/grid.phtml');			
			}
			?>
<?php
}
?>
		</div>
		<div id="footer"> 
			<p>Copyright © 2010. Dèanta ann an Alba.</p> 
		</div> 		
		<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-9096696-3");
pageTracker._trackPageview();
} catch(err) {}</script>
	</body>
</html>
